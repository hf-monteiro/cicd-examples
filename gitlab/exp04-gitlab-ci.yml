image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest

stages:
  - validate
  - plan
  - applyDev
  - applyQa
  - applyStage
  - applyProd

variables:
  TERRAFORM_DIR: "."
  TERRAFORM_PLAN_FILE: "planout"

.before_script_global: &before-script-global
  - terraform --version
  - echo "Terraform dir is ${TERRAFORM_DIR}"
  - cd "${TERRAFOM_DIR}"
  - ls

before_script:
  - *before-script-global

.validate_template: &validate-script
  script:
    - rm -rf .terraform
    - echo "${CI_JOB_STAGE} - ${CI_JOB_NAME}"
    - terraform validate ${TERRAFORM_DIR}/

.plan_template: &plan-script
  script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    - chmod 400 deploykey
    - eval $(ssh-agent -s)
    - ssh-add deploykey
    - echo "Terraform DIR VARIABLE ${TERRAFORM_DIR}"
    - aws sts get-caller-identity
    - terraform init --backend-config=${CI_ENVIRONMENT_NAME}.s3.texpackend
    - echo "Creating plan file for environment ${CI_ENVIRONMENT_NAME}"
    - terraform plan ${TF_ADDITIONAL_OPTS} -var-file ${CI_ENVIRONMENT_NAME}.tfvars -out=${TERRAFORM_PLAN_FILE}
  artifacts:
    paths:
      - ${TERRAFORM_DIR}/.terraform
      - ${TERRAFORM_DIR}/${TERRAFORM_PLAN_FILE}
      - ${TERRAFORM_DIR}/.terraform.lock.hcl

.apply_template: &apply-script
  script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    - chmod 400 deploykey
    - eval $(ssh-agent -s)
    - ssh-add deploykey
    - echo "ENVIRONMENT=${CI_ENVIRONMENT_NAME}"
    - terraform apply --auto-approve ${TERRAFORM_DIR}/${TERRAFORM_PLAN_FILE}

mr:validate:
  stage: validate
  rules:
    - if: $CI_MERGE_REQUEST_ID
  <<: *validate-script
  environment:
    name: dev

mr:plan-dev:
  stage: plan
  rules:
    - if: $CI_MERGE_REQUEST_ID
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  before_script:
    - apk --no-cache add jq
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - apk --no-cache add python3 py3-pip
    - pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn arn:aws:iam::ACC-EXAMPLE:role/terraform
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - aws sts get-caller-identity
  <<: *plan-script
  after_script:
    - terraform show --json ${TERRAFORM_PLAN_FILE} | convert_report > $PLAN_JSON
  artifacts:
    reports:
      terraform: $PLAN_JSON
  environment:
    name: dev

plan-dev:
  stage: plan
  only:
    - main
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  before_script:
    - apk --no-cache add python3 py3-pip
    - pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn arn:aws:iam::ACC-EXAMPLE:role/terraform
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - aws sts get-caller-identity
  <<: *plan-script
  environment:
    name: dev

apply-dev:
  stage: applyDev
  only:
    - main
  when: manual
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  before_script:
    - apk --no-cache add python3 py3-pip
    - pip3 install --upgrade pip && pip3 install --no-cache-dir awscli
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn arn:aws:iam::ACC-EXAMPLE:role/terraform
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - aws sts get-caller-identity
  <<: *apply-script
  environment:
    name: dev