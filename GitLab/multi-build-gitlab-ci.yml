image: maven:3.8-openjdk-11-slim

stages:
  - build
  - test
  - publish
  - deploy

# DinD service is required for Testcontainers
services:
  - name: docker:dind
    # explicitly disable tls to avoid docker startup interruption
    command: ["--tls=false"]

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

build-dev:
  stage: build
  only:
    - /^([0-9]+(\.[0-9]+)+)-dev/i
  before_script:
    - apt-get update
  script:
    - echo "Building JAR + running unit tests"
    - mvn clean package -B -q -Pdev -Dgroups=\!integration -DskipTests
    - echo "Staging Build completed"
  artifacts:
    expire_in: 1 hour
    name: target
    paths:
      - core/target/api.war

build-stage:
  stage: build
  only:
    - /([0-9]+(\.[0-9]+)+)-stage/i
  before_script:
    - apt-get update
  script:
    - echo "Building JAR + running unit tests"
    - mvn clean package -B -q -Pstaging -Dgroups=\!integration -DskipTests
    - echo "Staging Build completed"
  artifacts:
    expire_in: 1 hour
    name: target
    paths:
      - core/target/api.war

build-qa:
  stage: build
  only:
    - /([0-9]+(\.[0-9]+)+)-qa/i
  before_script:
    - apt-get update
  script:
    - echo "Building JAR + running unit tests"
    - mvn clean package -B -q -Pdev -Dgroups=\!integration -DskipTests
    - echo "Staging Build completed"
  artifacts:
    expire_in: 1 hour
    name: target
    paths:
      - core/target/api.war

build-prod:
  stage: build
  only:
    - /([0-9]+(\.[0-9]+)+)-prod/i
  before_script:
    - apt-get update
  script:
    - echo "Building JAR + running unit tests"
    - mvn clean package -B -q -Prelease -Dgroups=\!integration -DskipTests
    - echo "Prod Build completed"
  artifacts:
    expire_in: 1 hour
    name: target
    paths:
      - core/target/api.war
      
integration-test:
  stage: test
  before_script:
    - apt-get update
  script:
    - echo "Running integration tests"
    - mvn -B clean verify
    - echo "Integration tests completed"

# DevOps team will update this step
publish-dev:
  stage: publish
  only:
    - /^([0-9]+(\.[0-9]+)+)-dev/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEV
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEV
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - echo $ECR_REPOSITORY_ADDRESS_DEV
    - docker build -t $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - echo "Completed building docker image"
    - echo "Started publishing docker image"
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_DEV
    - docker images
    - docker push $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA

publish-stage:
  stage: publish
  only:
    - /^([0-9]+(\.[0-9]+)+)-stage/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_STAGE
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_STAGE
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - echo $ECR_REPOSITORY_ADDRESS_STAGE
    - docker build -t $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - echo "Completed building docker image"
    - echo "Started publishing docker image"
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_STAGE
    - docker images
    - docker push $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA

publish-qa:
  stage: publish
  only:
    - /^([0-9]+(\.[0-9]+)+)-qa/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_QA
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_QA
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - echo $ECR_REPOSITORY_ADDRESS_QA
    - docker build -t $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - echo "Completed building docker image"
    - echo "Started publishing docker image"
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_QA
    - docker images
    - docker push $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA

publish-prod:
  stage: publish
  only:
    - /^([0-9]+(\.[0-9]+)+)-prod/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - echo $ECR_REPOSITORY_ADDRESS_PROD
    - docker build -t $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - echo "Completed building docker image"
    - echo "Started publishing docker image"
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_PROD
    - docker images
    - docker push $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_SHORT_SHA

deploy-dev:
  stage: deploy
  variables:
    CI_AWS_ECS_CLUSTER: exp-dev-cluster
    CI_AWS_ECS_SERVICE: exp-app-dev
  only:
    - /([0-9]+(\.[0-9]+)+)-dev/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEV
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEV
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_DEV
    - docker pull $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:latest
    - docker tag $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_TAG
    - docker push $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:latest
    - docker push $ECR_REPOSITORY_ADDRESS_DEV/$REPOSITORY_NAME_DEV:$CI_COMMIT_TAG
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --force-new-deployment

deploy-qa:
  stage: deploy
  variables:
    CI_AWS_ECS_CLUSTER: exp-qa-cluster
    CI_AWS_ECS_SERVICE: exp-app-qa
  only:
    - /([0-9]+(\.[0-9]+)+)-qa/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_QA
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_QA
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_QA
    - docker pull $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:latest
    - docker tag $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_TAG
    - docker push $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:latest
    - docker push $ECR_REPOSITORY_ADDRESS_QA/$REPOSITORY_NAME_QA:$CI_COMMIT_TAG
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --force-new-deployment

deploy-stage:
  stage: deploy
  variables:
    CI_AWS_ECS_CLUSTER: exp-stage-cluster
    CI_AWS_ECS_SERVICE: exp-app-stage
  only:
    - /([0-9]+(\.[0-9]+)+)-stage/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_STAGE
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_STAGE
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_STAGE
    - docker pull $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:latest
    - docker tag $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_TAG
    - docker push $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:latest
    - docker push $ECR_REPOSITORY_ADDRESS_STAGE/$REPOSITORY_NAME_STAGE:$CI_COMMIT_TAG
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --force-new-deployment

deploy-prod:
  stage: deploy
  variables:
    CI_AWS_ECS_CLUSTER: exp-prod-cluster
    CI_AWS_ECS_SERVICE: exp-app-prod
  only:
    - /([0-9]+(\.[0-9]+)+)-prod/i
  image:
    name: amazon/aws-cli:2.1.38
    entrypoint: [ "" ]
  services:
    - docker:18.09.7-dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - echo "Starting building docker image"
    - echo $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_SHORT_SHA
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY_ADDRESS_PROD
    - docker pull $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PRODV:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:latest
    - docker tag $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_SHORT_SHA $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_TAG
    - docker push $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:latest
    - docker push $ECR_REPOSITORY_ADDRESS_PROD/$REPOSITORY_NAME_PROD:$CI_COMMIT_TAG
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --force-new-deployment
